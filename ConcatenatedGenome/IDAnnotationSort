#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper qw(Dumper);

my $start = time();
my $current = 0;


#Get original Index file from output of the Merger Script 
my $originalIndex = "/home/chrys/Documents/thesis/data/analysis/artificialGenome/RepeatMaskerTrack.sorted.indexed.4169";

open(READ,$originalIndex) || die "Could not open $originalIndex!: $!";

#Storing IDs -> Family since the input file will contain multiple IDs seperated by \|
my %IDhash;

while (<READ>) {
	chomp;
	my $line = $_;
	my @temp = split("\t",$line);

	my $ID = $temp[6];
	my @primaryTemp = split(/\:/,$ID);
	my $Family = $temp[3];
	$IDhash{$primaryTemp[1]} = $Family;

	$current = time();
	$current = $current - $start;
	print "Current Runtime: $current";
	print "\r";

}

close(READ);

#Get Annotation File from output of Bedtools Intersect between Reads and Index created from Index Script
my $annotationFile = "/home/chrys/Documents/thesis/data/analysis/artificialGenome/Annotation/4169.Annotation.bed";

open(READ2,$annotationFile) || die "Could not open $annotationFile!: $!";

my $outPut = "4169.IDAnnotation.bed";

open(OUTPUT,">",$outPut) || die "Could not create output file $outPut!: $!";

while (<READ2>) {
	chomp;
	my $line = $_;
	my @temp = split("\t",$line);

	my $ID = $temp[9];

	my @subID;

	if ($ID =~ m/\|/g) {

		@subID = split(/\|/,$ID);
		my @temp2;

		if ($subID[0] =~ m/\:/g ){
			@temp2 = split(/\:/,$subID[0]);
			$subID[0] = $temp2[1];
		}


	}else{

		my @temp3 = split(/\:/,$ID);
		$subID[0] = $temp3[1];

	}

	foreach my $elements(@subID){

		if (exists $IDhash{$elements}) {

			print OUTPUT "$temp[0]\t$temp[1]\t$temp[2]\t$temp[3]\t$IDhash{$elements}\n";
			
		}
	}

	$current = time();
	$current = $current - $start;
	print "Current Runtime: $current";
	print "\r";
}


my $stop = time();
my $jobTime = $stop - $start;

print "$jobTime\n";
#print Dumper \%IDhash;